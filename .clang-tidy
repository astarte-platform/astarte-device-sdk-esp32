# Copyright 2018-2023 SECO Mind Srl
#
# SPDX-License-Identifier: CC0-1.0

---
Checks: >
  -abseil-*,
  -altera-*,
  -android-*,
  -boost-*,
  bugprone-*,
  cert-*,
  clang-analyzer-*,
  -concurrency-*,
  cppcoreguidelines-*,
  -darwin-*,
  -fuchsia-*,
  -google-*,
  hicpp-*,
  -linuxkernel-*,
  llvm-*,
  -llvmlibc-*,
  misc-*,
  modernize-*,
  -mpi-*,
  -objc-*,
  -openmp-*,
  performance-*,
  portability-*,
  readability-*,
  -zircon-*,
  -bugprone-easily-swappable-parameters,
  -clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
  -clang-diagnostic-deprecated-declarations,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-avoid-magic-numbers,
  -modernize-macro-to-enum,
  -readability-function-cognitive-complexity,
  -readability-function-size

# TODO:
# - Resolve the warnings generated by the following rules.
#   1. modernize-macro-to-enum
#   2. readability-function-cognitive-complexity
#   3. readability-function-size

CheckOptions:
  - { key: bugprone-misplaced-widening-cast.CheckImplicitCasts, value: true }
  - { key: bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression, value: true }
  - { key: bugprone-suspicious-string-compare.WarnOnLogicalNotComparison, value: true }
  - { key: cppcoreguidelines-no-malloc.Allocations, value: "malloc,calloc" }
  - { key: cppcoreguidelines-no-malloc.Deallocations, value: "free" }
  - { key: cppcoreguidelines-no-malloc.Reallocations, value: "realloc" }
  - { key: readability-const-return-type.IgnoreMacros, value: false }
  - { key: readability-function-size.LineThreshold, value: 50 }
  - { key: readability-function-size.StatementThreshold, value: 50 }
  - { key: readability-function-size.BranchThreshold, value: 15 }
  - { key: readability-function-size.ParameterThreshold, value: 5 }
  - { key: readability-function-size.NestingThreshold, value: 2 }
  - { key: readability-function-size.VariableThreshold, value: 15 }

  - { key: readability-identifier-length.MinimumVariableNameLength, value: 3 }
  - { key: readability-identifier-length.IgnoredVariableNames, value: "" }
  - { key: readability-identifier-length.MinimumParameterNameLength, value: 3 }
  - { key: readability-identifier-length.IgnoredParameterNames, value: "" }
  - { key: readability-identifier-length.MinimumLoopCounterNameLength, value: 3 }
  - { key: readability-identifier-length.IgnoredLoopCounterNames, value: "^[ijk_]$" }

  - { key: readability-identifier-naming.ConstantCase, value: lower_case }
  - { key: readability-identifier-naming.ConstantParameterCase, value: lower_case }
  - { key: readability-identifier-naming.ConstantPointerParameterCase, value: lower_case }
  - { key: readability-identifier-naming.EnumCase, value: lower_case }
  - { key: readability-identifier-naming.EnumConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.FunctionCase, value: lower_case }
  - { key: readability-identifier-naming.GlobalConstantCase, value: lower_case }
  - { key: readability-identifier-naming.GlobalConstantPointerCase, value: lower_case }
  - { key: readability-identifier-naming.GlobalFunctionCase, value: lower_case }
  - { key: readability-identifier-naming.GlobalPointerCase, value: lower_case }
  - { key: readability-identifier-naming.GlobalVariableCase, value: lower_case }
  - { key: readability-identifier-naming.LocalConstantCase, value: lower_case }
  - { key: readability-identifier-naming.LocalConstantPointerCase, value: lower_case }
  - { key: readability-identifier-naming.LocalPointerCase, value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase, value: lower_case }
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.ParameterCase, value: lower_case }
  - { key: readability-identifier-naming.PointerParameterCase, value: lower_case }
  - { key: readability-identifier-naming.ScopedEnumConstantCase, value: lower_case }
  - { key: readability-identifier-naming.StaticConstantCase, value: lower_case }
  - { key: readability-identifier-naming.StaticVariableCase, value: lower_case }
  - { key: readability-identifier-naming.StructCase, value: lower_case }
  - { key: readability-identifier-naming.TypedefCase, value: lower_case }
  - { key: readability-identifier-naming.TypedefSuffix, value: "_t" }
  - { key: readability-identifier-naming.UnionCase, value: lower_case }
  - { key: readability-identifier-naming.VariableCase, value: lower_case }

  - { key: readability-redundant-declaration.IgnoreMacros, value: false }
  - { key: readability-simplify-boolean-expr.ChainedConditionalReturn, value: true }
  - { key: readability-simplify-boolean-expr.ChainedConditionalAssignment, value: true }
  - { key: readability-simplify-boolean-expr.SimplifyDeMorgan, value: true }
  - { key: readability-simplify-boolean-expr.SimplifyDeMorganRelaxed, value: true }
  - { key: readability-uppercase-literal-suffix.IgnoreMacros, value: false }

####################################################################################################
###                                 bugprone configuration                                       ###
####################################################################################################

# bugprone-argument-comment
# Do not care.
# Could be useful, but we don't use names for our parameters calls.

# bugprone-assert-side-effect
# Enable it.

# bugprone-assignment-in-if-condition
# Enable it.

# bugprone-bad-signal-to-kill-thread and cert-pos44-c
# Do not care.
# We do not use multithreading.

# bugprone-bool-pointer-implicit-conversion
# Enable it.

# bugprone-branch-clone
# Enable it.

# bugprone-copy-constructor-init
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-dangling-handle
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-dynamic-static-initializers
# Do not care.
# This rule is specific for multithreading functionality. But it also should not influence our code.

# bugprone-easily-swappable-parameters
# Disable it.
# Requires lots of refactoring and could make the code more complex and less readable.

# bugprone-exception-escape
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-fold-init-type
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-forward-declaration-namespace
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-forwarding-reference-overload
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-implicit-widening-of-multiplication-result
# Enable it.
# Useful even though it's basically impossible in our code base.

# bugprone-inaccurate-erase
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-incorrect-roundings
# Enable it.

# bugprone-infinite-loop
# Enable it.
# If we want some infinite loop we should make an exception.

# bugprone-integer-division
# Enable it.

# bugprone-lambda-function-name
# Enable it.

# bugprone-macro-parentheses
# Enable it.
# Ensures macros have parenthesis around their content.
# It's mandatory for most code standards as macros without parenthesis produce different results
# depending on the position.

# bugprone-macro-repeated-side-effects
# Enable it.

# bugprone-misplaced-operator-in-strlen-in-alloc
# Enable it.

# bugprone-misplaced-pointer-arithmetic-in-alloc
# Enable it.

# bugprone-misplaced-widening-cast
# Enable it. Also set the CheckImplicitCasts flag to true.

# bugprone-move-forwarding-reference
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-multiple-statement-macro
# Enable it.

# bugprone-no-escape
# Do not care.
# We do not use escape.

# bugprone-not-null-terminated-result
# Enable it.

# bugprone-parent-virtual-call
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-posix-return
# Do not care.
# We do not use pthread_* and posix_* functions.

# bugprone-redundant-branch-condition
# Enable it.

# bugprone-reserved-identifier, cert-dcl37-c and cert-dcl51-cpp
# Enable it.

# bugprone-shared-ptr-array-mismatch
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-signal-handler, cert-msc54-cpp and cert-sig30-c
# Enable it.
# Keep the AsyncSafeFunctionSet option set as default to POSIX

# bugprone-signed-char-misuse and cert-str34-c
# Enable it.
# If needed add entries to the option list CharTypdefsToIgnore (if typedef new types)
# Keep the DiagnoseSignedUnsignedCharComparisons to default (true)

# bugprone-sizeof-container
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-sizeof-expression
# Enable it.
# Keep the default for: WarnOnSizeOfConstant (true), WarnOnSizeOfThis (true),
# WarnOnSizeOfCompareToConstant (true), WarnOnSizeOfPointerToAggregate (true)
# Set the WarnOnSizeOfIntegerExpression to true

# bugprone-spuriously-wake-up-functions, cert-con36-c and cert-con54-cpp
# Do not care.
# We do not use this functionality.

# bugprone-standalone-empty
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-string-constructor
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-string-integer-assignment
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-string-literal-with-embedded-nul
# Enable it.

# bugprone-stringview-nullptr
# Do not care.

# bugprone-suspicious-enum-usage
# Enable it.

# bugprone-suspicious-include
# Enable it.

# bugprone-suspicious-memory-comparison, cert-exp42-c and cert-flp37-c
# Enable it.

# bugprone-suspicious-memset-usage
# Enable it.

# bugprone-suspicious-missing-comma
# Enable it.
# Keep the following options to default: SizeThreshold, RatioThreshold, MaxConcatenatedTokens

# bugprone-suspicious-realloc-usage
# Enable it.

# bugprone-suspicious-semicolon
# Enable it.

# bugprone-suspicious-string-compare
# Enable it.
# strncmp() is quite counter intuitive, better to always =0 or !=0 explicitly.
# Keep the following options to default: WarnOnImplicitComparison, StringCompareLikeFunctions
# Set the WarnOnLogicalNotComparison option to true

# bugprone-swapped-arguments
# Enable it.

# bugprone-terminating-continue
# Enable it.

# bugprone-throw-keyword-missing
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-too-small-loop-variable
# Enable it.
# Keep the MagnitudeBitsUpperLimit option default

# bugprone-unchecked-optional-access
# Do not care.
# We do not use this functionality as it's specific of C++. It is specified as time consuming,
# might be an option to disable it.

# bugprone-undefined-memory-manipulation
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-undelegated-constructor
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-unhandled-exception-at-new
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-unhandled-self-assignment and cert-oop54-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-unsafe-functions, cert-msc24-c and cert-msc33-c
# Enable it.
# Keep the ReportMoreUnsafeFunctions option default

# bugprone-unused-raii
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-unused-return-value and cert-err33-c
# Enable it.
# Keep the CheckedFunctions option default

# bugprone-use-after-move
# Do not care.
# We do not use this functionality as it's specific of C++.

# bugprone-virtual-near-miss
# Do not care.
# We do not use this functionality as it's specific of C++.

### Aliases ###

# bugprone-narrowing-conversions -> cppcoreguidelines-narrowing-conversions

####################################################################################################
###                                   cert configuration                                         ###
####################################################################################################

# cert-dcl21-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-dcl50-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-dcl58-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-env33-c
# Enable it.

# cert-err33-c
# Enable it.
# Always using a function result is good practice.

# cert-err34-c
# Enable it.

# cert-err52-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-err58-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-err60-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-flp30-c
# Enable it.

# cert-mem57-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-msc50-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-msc51-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

# cert-oop57-cpp
# Enable it.
# Keep the options MemSetNames, MemCpyNames and MemCmpNames defaults.

# cert-oop58-cpp
# Do not care.
# We do not use this functionality as it's specific of C++.

### Aliases ###

# cert-con36-c -> bugprone-spuriously-wake-up-functions
# cert-con54-cpp -> bugprone-spuriously-wake-up-functions
# cert-dcl03-c -> misc-static-assert
# cert-dcl16-c -> readability-uppercase-literal-suffix
# cert-dcl37-c -> bugprone-reserved-identifier
# cert-dcl51-cpp -> bugprone-reserved-identifier
# cert-dcl54-cpp -> misc-new-delete-overloads
# cert-dcl59-cpp -> google-build-namespaces
# cert-err09-cpp -> misc-throw-by-value-catch-by-reference
# cert-err61-cpp -> misc-throw-by-value-catch-by-reference
# cert-exp42-c -> bugprone-suspicious-memory-comparison
# cert-fio38-c -> misc-non-copyable-objects
# cert-flp37-c -> bugprone-suspicious-memory-comparison
# cert-msc24-c -> bugprone-unsafe-functions
# cert-msc30-c -> cert-msc50-cpp
# cert-msc32-c -> cert-msc51-cpp
# cert-msc33-c -> bugprone-unsafe-functions
# cert-msc54-cpp -> bugprone-signal-handler
# cert-oop11-cpp -> performance-move-constructor-init
# cert-oop54-cpp -> bugprone-unhandled-self-assignment
# cert-pos44-c -> bugprone-bad-signal-to-kill-thread
# cert-pos47-c -> concurrency-thread-canceltype-asynchronous
# cert-sig30-c -> bugprone-signal-handler
# cert-str34-c -> bugprone-signed-char-misuse

####################################################################################################
###                               clang-analyzer configuration                                   ###
####################################################################################################

# clang-analyzer-core.DynamicTypePropagation
# Enable it.

# clang-analyzer-core.uninitialized.CapturedBlockVariable
# Enable it.

# clang-analyzer-cplusplus.InnerPointer
# Do not care.
# We do not use this functionality as it's specific of C++.

# clang-analyzer-nullability.NullableReturnedFromNonnull
# Enable it.

# clang-analyzer-optin.osx.OSObjectCStyleCast
# Do not care.
# We do not use this functionality.

# clang-analyzer-optin.performance.GCDAntipattern
# Do not care.
# We do not use this functionality.

# clang-analyzer-optin.performance.Padding
# Enable it.

# clang-analyzer-optin.portability.UnixAPI
# Do not care.
# We do not use this functionality.

# clang-analyzer-osx.*
# Do not care.
# We do not use this functionality.

# clang-analyzer-valist.CopyToSelf
# Enable it.

# clang-analyzer-valist.Uninitialized
# Enable it.

# clang-analyzer-valist.Unterminated
# Enable it.

### Aliases to static analyzer rules ###

# clang-analyzer-core.* -> 1.1.1.*. core.*
# Enable it.
# All those warnings are relevant and do not require custom options.

# clang-analyzer-cplusplus.* -> 1.1.2.*. cplusplus.*
# Do not care.
# We do not use this functionality as it's specific of C++.

# clang-analyzer-deadcode.DeadStores -> 1.1.3.1. deadcode.DeadStores
# Enable it.
# Avoids store and not use operations.

# clang-analyzer-nullability.* -> 1.1.4.*. nullability.NullPassedToNonnull
# Do not care.
# We do not use this functionality as it's specific of ObjC.

# clang-analyzer-optin.cplusplus.UninitializedObject -> 1.1.5.1. optin.cplusplus.UninitializedObject
# Do not care.
# We do not use this functionality as it's specific of C++.

# clang-analyzer-optin.cplusplus.VirtualCall -> 1.1.5.2. optin.cplusplus.VirtualCall
# Do not care.
# We do not use this functionality as it's specific of C++.

# clang-analyzer-optin.mpi.MPI-Checker -> 1.1.5.3. optin.mpi.MPI-Checker
# Do not care.
# We do not use this functionality.

# clang-analyzer-optin.osx.* -> 1.1.5.4/5. optin.osx.*
# Do not care.
# We do not use this functionality.

# clang-analyzer-osx.* -> 1.1.8.*. osx.*
# Do not care.
# We do not use this functionality.

# clang-analyzer-security.FloatLoopCounter -> 1.1.6.1. security.FloatLoopCounter
# Enable it.

# clang-analyzer-security.insecureAPI.* -> 1.1.6.*. security.insecureAPI.*
# Enable it.

# clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling -> 1.1.6.13. security.insecureAPI.DeprecatedOrUnsafeBufferHandling
# Disable it.
# _s functions are not supported in GCC.


# clang-analyzer-unix.* -> 1.1.7.*. unix.*
# Enable it.

####################################################################################################
###                             cppcoreguidelines configuration                                  ###
####################################################################################################

# cppcoreguidelines-avoid-capture-default-when-capturing-this
# Do not care.
# We do not use this functionality as it's specific of C++.

# cppcoreguidelines-avoid-const-or-ref-data-members
# Enable it.

# cppcoreguidelines-avoid-do-while
# Enable it.
# Keep IgnoreMacros option to default (false)

# cppcoreguidelines-avoid-goto
# Enable it.

# cppcoreguidelines-avoid-non-const-global-variables
# Disable it.
# Supposedly it finds global variables non constant. However, it does not seems to handle correctly
# `static` variables. Would be very useful if it worked correctly.

# cppcoreguidelines-avoid-reference-coroutine-parameters
# Do not care.
# We do not use this functionality as it's specific of C++.

# cppcoreguidelines-init-variables
# Disable it.
# We often pass non initialized variables to functions (as pointers) to be used as output.
# If we want to follow this we must always initialize variables even when not subsequently used.

# cppcoreguidelines-interfaces-global-init
# Do not care.
# We do not use this functionality as it's specific of C++.

# cppcoreguidelines-macro-usage
# Enable it.
# Leave options AllowedRegexp, CheckCapsOnlyand and IgnoreCommandLineMacros as default.

# cppcoreguidelines-narrowing-conversions
# Enable it.
# Narrowing conversion can lead to errors. Better to do an explicit cast.
# Leave options WarnOnIntegerNarrowingConversion, WarnOnIntegerToFloatingPointNarrowingConversion,
# WarnOnFloatingPointNarrowingConversion, WarnWithinTemplateInstantiation,
# WarnOnEquivalentBitWidth, IgnoreConversionFromTypes, PedanticMode to default.

# cppcoreguidelines-no-malloc
# Enable it.
# Configure some of the options.

# cppcoreguidelines-owning-memory
# Do not care.
# We do not use this functionality as it's specific of C++.

# cppcoreguidelines-prefer-member-initializer
# Do not care.
# We do not use this functionality as it's specific of C++.

# cppcoreguidelines-pro-*
# Do not care.
# We do not use this functionality as it's specific of C++.

# cppcoreguidelines-slicing
# Do not care.
# We do not use this functionality as it's specific of C++.

# cppcoreguidelines-special-member-functions
# Do not care.
# We do not use this functionality as it's specific of C++.

# cppcoreguidelines-virtual-class-destructor
# Do not care.
# We do not use this functionality as it's specific of C++.

### Aliases ###

# cppcoreguidelines-avoid-c-arrays -> modernize-avoid-c-arrays
# cppcoreguidelines-avoid-magic-numbers -> readability-magic-numbers
# cppcoreguidelines-c-copy-assignment-signature -> misc-unconventional-assign-operator
# cppcoreguidelines-explicit-virtual-functions -> modernize-use-override
# cppcoreguidelines-macro-to-enum -> modernize-macro-to-enum
# cppcoreguidelines-non-private-member-variables-in-classes -> misc-non-private-member-variables-in-classes

####################################################################################################
###                                  hicpp configuration                                         ###
####################################################################################################

# hicpp-exception-baseclass
# Do not care.
# We do not use this functionality as it's specific of C++.

# hicpp-multiway-paths-covered
# Enable it.

# hicpp-no-assembler
# Enable it.

# hicpp-signed-bitwise
# Enable it.
# Bitwise operations on signed number lead to errors.
# Keep IgnorePositiveIntegerLiterals to the default (false)

### Aliases ###

# hicpp-avoid-goto -> cppcoreguidelines-avoid-goto
# hicpp-avoid-c-arrays -> modernize-avoid-c-arrays
# hicpp-braces-around-statements -> readability-braces-around-statements
# hicpp-deprecated-headers -> modernize-deprecated-headers
# hicpp-explicit-conversions -> google-explicit-constructor
# hicpp-function-size -> readability-function-size
# hicpp-invalid-access-moved -> bugprone-use-after-move
# hicpp-member-init -> cppcoreguidelines-pro-type-member-init
# hicpp-move-const-arg -> performance-move-const-arg
# hicpp-named-parameter -> readability-named-parameter
# hicpp-new-delete-operators -> misc-new-delete-overloads
# hicpp-no-array-decay -> cppcoreguidelines-pro-bounds-array-to-pointer-decay
# hicpp-no-malloc -> cppcoreguidelines-no-malloc
# hicpp-noexcept-move -> performance-noexcept-move-constructor
# hicpp-special-member-functions -> cppcoreguidelines-special-member-functions
# hicpp-static-assert -> misc-static-assert
# hicpp-undelegated-constructor -> bugprone-undelegated-constructor
# hicpp-uppercase-literal-suffix -> readability-uppercase-literal-suffix
# hicpp-use-auto -> modernize-use-auto
# hicpp-use-emplace -> modernize-use-emplace
# hicpp-use-equals-default -> modernize-use-equals-default
# hicpp-use-equals-delete -> modernize-use-equals-delete
# hicpp-use-noexcept -> modernize-use-noexcept
# hicpp-use-nullptr -> modernize-use-nullptr
# hicpp-use-override -> modernize-use-override
# hicpp-vararg -> cppcoreguidelines-pro-type-vararg


####################################################################################################
###                                   llvm configuration                                         ###
####################################################################################################

# llvm-header-guard
# Enable it.
# We are compatible with the LLVM style.

# llvm-include-order
# Enable it.

# llvm-namespace-comment
# Do not care.
# We do not use this functionality as it's specific of C++.

# llvm-prefer-isa-or-dyn-cast-in-conditionals
# Do not care.
# We do not use this functionality.

# llvm-prefer-register-over-unsigned
# Enable it.

# llvm-twine-local
# Do not care.
# We do not use this functionality.

### Aliases ###

# llvm-else-after-return -> readability-else-after-return
# llvm-qualified-auto -> readability-qualified-auto


####################################################################################################
###                                   misc configuration                                         ###
####################################################################################################

# misc-confusable-identifiers
# Enable it.

# misc-const-correctness
# Do not care.
# This check would be great, but it does not run on C code (as described in the clang-tidy docs).

# misc-definitions-in-headers
# Enable it.

# misc-misleading-bidirectional
# Do not care.
# We do not use this functionality as it's specific of C++.

# misc-misleading-identifier
# Enable it.

# misc-misplaced-const
# Enable it.

# misc-new-delete-overloads
# Do not care.
# We do not use this functionality as it's specific of C++.

# misc-no-recursion
# Enable it.

# misc-non-copyable-objects
# Do not care.
# We do not use this functionality as it's specific of C++.

# misc-non-private-member-variables-in-classes
# Do not care.
# We do not use this functionality as it's specific of C++.

# misc-redundant-expression
# Enable it.

# misc-static-assert
# Enable it.

# misc-throw-by-value-catch-by-reference
# Do not care.
# We do not use this functionality as it's specific of C++.

# misc-unconventional-assign-operator
# Enable it.

# misc-uniqueptr-reset-release
# Do not care.
# We do not use this functionality as it's specific of C++.

# misc-unused-alias-decls
# Do not care.
# We do not use this functionality as it's specific of C++.

# misc-unused-parameters
# Enable it.
# Helps avoiding dangling parameters.

# misc-unused-using-decls
# Do not care.
# We do not use this functionality as it's specific of C++.

# misc-use-anonymous-namespace
# Do not care.
# We do not use this functionality as it's specific of C++.

####################################################################################################
###                                modernize configuration                                       ###
####################################################################################################

# modernize-avoid-bind
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-avoid-c-arrays
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-concat-nested-namespaces
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-deprecated-headers
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-deprecated-ios-base-aliases
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-loop-convert
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-macro-to-enum
# Enable it.

# modernize-make-shared
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-make-unique
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-pass-by-value
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-raw-string-literal
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-redundant-void-arg
# Enable it.

# modernize-replace-auto-ptr
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-replace-disallow-copy-and-assign-macro
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-replace-random-shuffle
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-return-braced-init-list
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-shrink-to-fit
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-unary-static-assert
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-auto
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-bool-literals
# Enable it.

# modernize-use-default-member-init
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-emplace
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-equals-default
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-noexcept
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-nullptr
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-override
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-trailing-return-type
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-transparent-functors
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-uncaught-exceptions
# Do not care.
# We do not use this functionality as it's specific of C++.

# modernize-use-using
# Do not care.
# We do not use this functionality as it's specific of C++.

####################################################################################################
###                               performance configuration                                      ###
####################################################################################################

# performance-faster-string-find
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-for-range-copy
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-implicit-conversion-in-loop
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-inefficient-algorithm
# Enable it.

# performance-inefficient-string-concatenation
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-inefficient-vector-operation
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-move-const-arg
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-move-constructor-init
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-no-automatic-move
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-no-int-to-ptr
# Enable it.

# performance-noexcept-move-constructor
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-trivially-destructible
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-type-promotion-in-math-fn
# Enable it.

# performance-unnecessary-copy-initialization
# Do not care.
# We do not use this functionality as it's specific of C++.

# performance-unnecessary-value-param
# Do not care.
# We do not use this functionality as it's specific of C++.

####################################################################################################
###                               portability configuration                                      ###
####################################################################################################

# portability-restrict-system-includes
# Do not care.
# We do not blacklist the system includes.

# portability-simd-intrinsics
# Do not care.
# We do not use this functionality as it's specific of C++.

# portability-std-allocator-const
# Do not care.
# We do not use this functionality as it's specific of C++.

####################################################################################################
###                               readability configuration                                      ###
####################################################################################################

# readability-avoid-const-params-in-decls
# Enable it.

# readability-braces-around-statements
# Enable it.

# readability-const-return-type
# Enable it.
# Configure some of the options.

# readability-container-contains
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-container-data-pointer
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-container-size-empty
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-convert-member-functions-to-static
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-delete-null-pointer
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-duplicate-include
# Enable it.

# readability-else-after-return
# Enable it.
# Different philosophies are present in the most used coding standards.
# LLVM suggests using early exits where possible, while MISRA enforces a single exit point to
# functions.
# In both cases, this rule helps with keeping the code linear and cleaner.
# Keep WarnOnUnfixable and WarnOnConditionVariables to the default (true, true)

# readability-function-cognitive-complexity
# Enable it.
# Cognitive complexity is a very good metric for readable code.
# Keep Threshold, DescribeBasicIncrements and IgnoreMacros to the default (25, true, false)

# readability-function-size
# This can help keeping the code base manageable.
# Enable it.
# Configure some of the options.

# readability-identifier-length
# Enable it.
# Identifier names shorter than 3 chars are usually not easy to understand.
# Keep the options MinimumVariableNameLength (3), IgnoredVariableNames (empty),
# MinimumParameterNameLength (3), IgnoredParameterNames (^[n]$), MinimumLoopCounterNameLength (2),
# IgnoredLoopCounterNames (^[ijk_]$;), MinimumExceptionNameLength (2) and
# IgnoredExceptionVariableNames (^[e]$) to the default

# readability-identifier-naming
# Enable it.
# A lot of options, configure some of them.

# readability-implicit-bool-conversion
# Enable it.

# readability-inconsistent-declaration-parameter-name
# Having different names for parameters in declaration and definition of a function hinders
# readability.
# Enable it.

# readability-isolate-declaration
# Enable it.

# readability-magic-numbers
# Magic numbers are hard to read and lead to errors.
# Enable it.

# readability-make-member-function-const
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-misleading-indentation
# Enable it.

# readability-misplaced-array-index
# Enable it.

# readability-named-parameter
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-non-const-parameter
# Enable it.

# readability-qualified-auto
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-redundant-access-specifiers
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-redundant-control-flow
# Enable it.

# readability-redundant-declaration
# Enable it.
# Configure some of the options.

# readability-redundant-function-ptr-dereference
# Enable it.

# readability-redundant-member-init
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-redundant-preprocessor
# Enable it.

# readability-redundant-smartptr-get
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-redundant-string-cstr
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-redundant-string-init
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-simplify-boolean-expr
# Enable it.
# Configure some of the options.

# readability-simplify-subscript-expr
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-static-accessed-through-instance
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-static-definition-in-anonymous-namespace
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-string-compare
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-suspicious-call-argument
# Enable it.
# Keep the options as default.

# readability-uniqueptr-delete-release
# Do not care.
# We do not use this functionality as it's specific of C++.

# readability-uppercase-literal-suffix
# Enable it.
# Configure some of the options.

# readability-use-anyofallof
# Do not care.
# We do not use this functionality as it's specific of C++.

####################################################################################################
###                                          others                                              ###
####################################################################################################

# clang-diagnostic-format
# This error comes from the clang compiler. The type configuration of ESP-IDF is quite different
# from standard.
# I am not sure if this works, but this should be filtered out somewhere else, not here.
